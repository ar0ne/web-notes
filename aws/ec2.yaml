AWSTemplateFormatVersion: "2010-09-09"
Description: This template creates VPC with 2 public and private subnets, EC2 for db and backend, and required security groups, and NACLs.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Networking configuration"
        Parameters:
          - AvailabilityZone
          - VpcCIDR
          - PublicSubnetCIDR
          - PrivateSubnetCIDR
      -
        Label:
          default: "Tags configuration"
        Parameters:
          - Environment
          - ProjectName
      - Label:
          default: "Compute configuration"
        Parameters:
          - WebAppEC2InstanceType
          - DatabaseEC2InstanceType

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment for the project. By default it's dev.
    AllowedValues:
      - dev
      - prod

  ProjectName:
    Type: String
    Default: notes
    Description: Name of the project.

  AvailabilityZone:
    Type: String
    Default: us-east-1a
    Description: AWS availability zone. By default it's us-east-1a

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR for VPC. By default it's 10.0.0.0/16.

  PublicSubnetCIDR:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR for public subnet. By default it's 10.0.0.0/24.

  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR for public subnet. By default it's 10.0.2.0/24.

  WebAppEC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.nano
    Description: Enter t2.micro or t2.nano. Default is t2.micro.

  DatabaseEC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.nano
    Description: Enter t2.micro or t2.nano. Default is t2.micro.

  WebAppEC2ImageId:
    Type: 'AWS::EC2::Image::Id'
    Default: ami-06c68f701d8090592
    Description: AM ID for web app ec2 instance

  DatabaseEC2ImageId:
    Type: 'AWS::EC2::Image::Id'
    Default: ami-06c68f701d8090592
    Description: AM ID for web app ec2 instance

  SSHKeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of key pair for SSH connections to EC2 instances.

  DBPort:
    Type: Number
    Default: 27017
    Description: Database port. By default mongo db port is 27017.

  DBUser:
    Type: String
    Description: MongoDB user name.

  DBPassword:
    Type: String
    Description: MongoDB user password.

  InstallDocker:
    Type: String
    Default:
      |
      amazon-linux-extras install docker -y
      service docker start
      systemctl enable docker
      usermod -a -G docker ec2-user
      chmod 666 /var/run/docker.sock

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PublicSubnetCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PrivateSubnetCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: PrivateSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: RouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
# todo: use different port for SSH
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: SSHSecurityGroup

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
# todo: add load balancer
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: HTTPSecurityGroup

  PrivateSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: Resource Name
          Value: PrivateSubnetNACL

  PrivateSubnetNACLEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref PublicSubnetCIDR
      Egress: false
      NetworkAclId: !Ref PrivateSubnetNACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PrivateSubnetNACLExit1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PrivateSubnetNACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PrivateSubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateSubnetNACL
      SubnetId: !Ref PrivateSubnet

  WebAppEC2:
    Type: AWS::EC2::Instance
    DependsOn: InternetGateway
    Properties:
      ImageId: !Ref WebAppEC2ImageId
      InstanceType: !Ref WebAppEC2InstanceType
      KeyName: !Ref SSHKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          GroupSet:
            - !Ref SSHSecurityGroup
            - !Ref HTTPSecurityGroup
          SubnetId: !Ref PublicSubnet

  DatabaseEC2:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PrivateSubnet
      ImageId: !Ref DatabaseEC2ImageId
      InstanceType: !Ref DatabaseEC2InstanceType
      KeyName : !Ref SSHKeyPair
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            yum update -y
            
            # Mount Drive
            mkdir /data
            mkfs -t xfs /dev/xvdh
            mount /dev/xvdh /data
            
            # You can verify the mount is working with lsblk
            
            ${InstallDocker}
            
            # bind_ip=0.0.0.0: Make mongo available externally
            docker run -d \
              -p ${DBPort}:${DBPort} \
              -e bind_ip=0.0.0.0 \
              -e MONGO_INITDB_ROOT_USERNAME=${DBUser} \
              -e MONGO_INITDB_ROOT_PASSWORD=${DBPassword} \
              -v=/data:/data/db \
            mongo
          - DbUser:
              !Ref DBUser
            DbPass:
              !Ref DBPassword
            InstallDocker:
              !Ref InstallDocker

  MongoVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: 4
      VolumeType: gp2

    MongoMountPoint:
      Type: AWS::EC2::VolumeAttachment
      Properties:
        InstanceId: !Ref MongoInstance
        VolumeId: !Ref MongoVolume
        Device: /dev/xvdh
