---
AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys web notes app and mondoDB to ecs cluster.

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment for the project. By default it's dev.
    AllowedValues:
      - dev
      - prod

  ProjectName:
    Type: String
    Default: notes
    Description: Name of the project.

  WebAppDockerImage:
    Description: The Docker image to pull from your container registry (<AWS account ID>.dkr.ecr.us-east-1.amazonaws.com/<YOUR_SERVICE>:latest)
    Type: String

  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet where to deploy web app service.

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  EnvFile:
    Description: ARN of environment file for web app in S3
    Type: String

  WebAppPort:
    Description: Exposed port of the web app.
    Type: Number
    Default: 8000

Resources:

  WebAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !Ref ServiceRole
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: webnotes-service
          Essential: true
          Image: !Ref WebAppDockerImage
          Environment:
            - Name: "region"
              Value: !Ref AWS::Region
          EnvironmentFiles:
            - Value: !Ref EnvFile
              Type: s3
          PortMappings:
            - ContainerPort: !Ref WebAppPort
              HostPort: !Ref WebAppPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref Environment

  WebAppService:
    Type: AWS::ECS::Service
    DependsOn: WebAppTaskDefinition
    Properties:
      ServiceName: webapp-service
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref WebAppTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 1

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-task-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Sid": "",
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": "sts:AssumeRole"
            }]
        }

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement": [ {
                "Effect": "Allow",
                "Action": [
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "s3:Get*",
                  "s3:List*"
                ],
                "Resource": "*"
              } ]
            }